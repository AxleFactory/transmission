import com.android.build.OutputFile

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: "com.android.application"
apply from: "../../node_modules/react-native/react.gradle"
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

/**
 * Application version numbers
 */
def versionMajor = 1
def versionMinor = 0
def versionPatch = 2
def versionBuild = 1

/**
 * Build meta information definitions
 */
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Generates a Fabric properties file with api secrets
 */
def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: BERNIE_MESSENGER_ANDROID_FABRIC_API_SECRET)
        }
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.berniesanders.messenger"
        minSdkVersion 16
        targetSdkVersion 22

        versionCode ((versionMajor * 1000000) + (versionMinor * 10000) + (versionPatch * 100) + versionBuild)
        versionName "${versionMajor}.${versionMinor}.${versionPatch}-${gitSha.substring(0, 6)}"

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
      release {
        storeFile file(BERNIE_MESSENGER_ANDROID_STORE_FILE)
        storePassword BERNIE_MESSENGER_ANDROID_STORE_PASSWORD
        keyAlias BERNIE_MESSENGER_ANDROID_KEY_ALIAS
        keyPassword BERNIE_MESSENGER_ANDROID_KEY_PASSWORD
      }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [fabricApiKey: BERNIE_MESSENGER_ANDROID_FABRIC_API_KEY]
        }
        release {
            manifestPlaceholders = [fabricApiKey: BERNIE_MESSENGER_ANDROID_FABRIC_API_KEY]
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

afterEvaluate {
    initFabricPropertiesIfNeeded()
}

dependencies {
    compile project(':react-native-contacts')
    compile project(':react-native-vector-icons')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.6@aar') {
        transitive = true;
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}
